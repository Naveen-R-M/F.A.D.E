#!/usr/bin/env python3
"""
Nextflow wrapper script for Molecule Generator Agent
"""

import os
import sys
import json
import argparse
from pathlib import Path

# Add the parent directory to Python path for imports
fade_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(fade_root))

from agents.molecule_generator.molecule_generator import MoleculeGenerator
from utils.logging import setup_logging, get_logger

def main():
    parser = argparse.ArgumentParser(description="Run Molecule Generator Agent")
    parser.add_argument("--requirements", required=True, help="Path to requirements.json")
    parser.add_argument("--binding-sites", required=True, help="Path to binding_sites.json")
    parser.add_argument("--target-info", required=True, help="Path to target_info.json")
    parser.add_argument("--output-dir", default=".", help="Output directory")
    parser.add_argument("--api-key", help="Gemini API key")
    parser.add_argument("--model", default="models/gemini-2.5-flash", help="Gemini model")
    parser.add_argument("--max-molecules", type=int, default=100, help="Maximum molecules to generate")
    parser.add_argument("--iteration", type=int, default=0, help="Current iteration number")
    
    args = parser.parse_args()
    
    # Setup logging
    setup_logging(log_level="INFO")
    logger = get_logger("nextflow.molecule_generator")
    
    try:
        # Load input data
        with open(args.requirements, 'r') as f:
            requirements = json.load(f)
        
        with open(args.binding_sites, 'r') as f:
            binding_sites = json.load(f)
            
        with open(args.target_info, 'r') as f:
            target_info = json.load(f)
        
        # Prepare input for molecule generator
        input_data = {
            "prepared_structures": {},  # Will be populated if structure files exist
            "binding_sites": binding_sites,
            "parsed_query_data": {
                "molecule_properties": requirements,
                "protein_targets": [target_info]
            },
            "iteration": args.iteration
        }
        
        # Initialize molecule generator
        molecule_generator = MoleculeGenerator(
            gemini_api_key=args.api_key,
            gemini_model=args.model
        )
        
        # Process molecule generation
        logger.info(f"Generating molecules for target: {target_info.get('target', 'unknown')}")
        result = molecule_generator.process(input_data)
        
        # Extract and write outputs
        molecules = result.get("molecules", [])
        
        # Write molecules.sdf
        sdf_content = ""
        valid_molecules = []
        
        for i, mol_data in enumerate(molecules[:args.max_molecules]):
            mol_id = f"MOL_{i+1:03d}"
            smiles = mol_data.get("smiles", "")
            properties = mol_data.get("properties", {})
            
            if smiles:
                # Create SDF entry (simplified)
                sdf_content += f"{mol_id}\n"
                sdf_content += f"  Generated by F.A.D.E\n"
                sdf_content += f"  SMILES: {smiles}\n"
                sdf_content += f"$$$$\n"
                
                valid_molecules.append({
                    "id": mol_id,
                    "smiles": smiles,
                    "properties": properties
                })
        
        with open(os.path.join(args.output_dir, "molecules.sdf"), "w") as f:
            f.write(sdf_content)
        
        # Write molecules.json with detailed information
        with open(os.path.join(args.output_dir, "molecules.json"), "w") as f:
            json.dump(valid_molecules, f, indent=2)
        
        # Write generation statistics
        stats = {
            "total_generated": len(molecules),
            "valid_molecules": len(valid_molecules),
            "iteration": args.iteration,
            "target": target_info.get("target", "unknown")
        }
        
        with open(os.path.join(args.output_dir, "generation_stats.json"), "w") as f:
            json.dump(stats, f, indent=2)
        
        # Write full result for debugging
        with open(os.path.join(args.output_dir, "molecule_generator_full_result.json"), "w") as f:
            json.dump(result, f, indent=2)
            
        logger.info(f"Generated {len(valid_molecules)} valid molecules")
        
    except Exception as e:
        logger.error(f"Molecule generation failed: {str(e)}")
        # Write empty outputs
        with open(os.path.join(args.output_dir, "molecules.sdf"), "w") as f:
            f.write("# Molecule generation failed\n")
        with open(os.path.join(args.output_dir, "molecules.json"), "w") as f:
            json.dump({"error": str(e), "molecules": []}, f, indent=2)
        sys.exit(1)

if __name__ == "__main__":
    main()
