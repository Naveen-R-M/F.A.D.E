/*
 * F.A.D.E Nextflow Configuration - Fixed Environment Variable Handling
 */

// Default parameters
params {
    // Input/Output
    query = null
    output_dir = "results_${new Date().format('yyyyMMdd_HHmmss')}"
    
    // Pipeline control
    max_molecules = 100
    max_iterations = 1
    min_docking_score = -7.0
    docking_method = "vina"
    max_poses = 10
    
    // Resource limits
    max_cpus = 16
    max_memory = '64.GB'
    max_time = '240.h'
    
    // Environment configuration
    fade_env_path = "${System.getenv('SCRATCH')}/conda-envs/fade"
    
    // API configuration
    gemini_api_key = System.getenv('GEMINI_API_KEY') ?: ""
    gemini_model = "models/gemini-2.5-flash"
    
    // Software paths
    alphafold_container = "/shared/container_repository/AlphaFold/alphafold3.sif"
    schrodinger_module = "schrodinger/2024-4"
    
    // Features
    use_alphafold = true
    run_fep = false
    
    // Debugging
    debug = false
    trace_enabled = false
}

// Process defaults
process {
    executor = 'slurm'
    queue = 'short'
    
    // Default resources
    cpus = 1
    memory = '4.GB'
    time = '1.h'
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 2
    
    // Safe environment loading
    beforeScript = '''
    # Safely load environment variables from .env file
    if [ -f "${projectDir}/.env" ]; then
        set +u  # Disable unbound variable errors temporarily
        source "${projectDir}/.env" || true
        export $(cat "${projectDir}/.env" | grep -v '^#' | grep '=' | xargs) || true
        set -u  # Re-enable unbound variable errors
    fi
    
    # Set default values for required variables
    export GEMINI_API_KEY="${GEMINI_API_KEY:-}"
    export PYTHONPATH="${projectDir}:${PYTHONPATH:-}"
    '''
    
    // Process-specific configurations
    withLabel: process_low {
        cpus = 1
        memory = '2.GB'
        time = '30.m'
        queue = 'short'
    }
    
    withLabel: process_medium {
        cpus = 4
        memory = '8.GB'
        time = '2.h'
        queue = 'short'
    }
    
    withLabel: process_high {
        cpus = 8
        memory = '32.GB'
        time = '8.h'
        queue = 'short'
    }
    
    // Specific process overrides
    withName: 'structurePrediction' {
        queue = 'gpu'
        clusterOptions = '--gres=gpu:1'
        cpus = 8
        memory = '32.GB'
        time = '4.h'
    }
    
    withName: 'molecularDocking' {
        queue = 'short'
        cpus = 8
        memory = '16.GB'
        time = '4.h'
    }
}

// Execution profiles
profiles {
    
    // Local testing (for development)
    local {
        process {
            executor = 'local'
            cpus = 2
            memory = '4.GB'
            time = '30.m'
        }
    }
    
    // Northeastern University HPC
    northeastern {
        process {
            executor = 'slurm'
            queue = 'short'
        }
        
        executor {
            name = 'slurm'
            queueSize = 50
            pollInterval = '30s'
            submitRateLimit = '10/1min'
        }
    }
    
    // Debug profile
    debug {
        process.beforeScript = '''
        echo "DEBUG: Starting process $task.process with task ID $task.index"
        echo "DEBUG: Working directory: $PWD"
        echo "DEBUG: GEMINI_API_KEY length: ${#GEMINI_API_KEY}"
        echo "DEBUG: Environment variables:"
        env | grep -E "(GEMINI|PYTHONPATH)" || true
        '''
        process.afterScript = 'echo "DEBUG: Completed process $task.process"'
        params.debug = true
    }
    
    // Stub testing (for workflow validation)
    stub {
        process {
            executor = 'local'
            stub = true
        }
        params.debug = true
    }
}

// Reporting and monitoring
timeline {
    enabled = true
    file = "${params.output_dir}/pipeline_timeline.html"
}

report {
    enabled = true
    file = "${params.output_dir}/pipeline_report.html"
}

trace {
    enabled = params.trace_enabled
    file = "${params.output_dir}/pipeline_trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,workdir,scratch,error_action'
}

dag {
    enabled = true
    file = "${params.output_dir}/pipeline_dag.svg"
}

// Cleanup configuration
cleanup = false

// Manifest
manifest {
    name = 'F.A.D.E'
    author = 'Naveen Rajagopal Mohan Raj'
    homePage = 'https://github.com/Naveen-R-M/F.A.D.E'
    description = 'Fully Agentic Drug Engine - AI-powered drug discovery pipeline'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.0'
    version = '2.0.0'
}
